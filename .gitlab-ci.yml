image: docker:latest

stages:
  - build_image
  - testing
  # - testing_release
  # - release
  - cleanup

variables:
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:b$CI_PIPELINE_ID-$CI_BUILD_REF_SLUG
  CONTAINER_TEST_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:test-release
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build_image:
  stage: build_image
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker image build --pull -t $CONTAINER_TEST_IMAGE .
    - docker image push $CONTAINER_TEST_IMAGE

pep8:
  stage: testing
  image: $CONTAINER_TEST_IMAGE
  before_script:
    - python3.9 -m pip install flake8
  script:
    - cd .
    - flake8 --statistics --show-source --ignore=W291,W293 --count src/

# test_release_push:
#   stage: testing_release
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker image pull $CONTAINER_TEST_IMAGE
#     - docker image tag $CONTAINER_TEST_IMAGE $CONTAINER_TEST_RELEASE_IMAGE
#     - docker image push $CONTAINER_TEST_RELEASE_IMAGE
#   only:
#     - release

# release_push:
#   stage: release
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#     - docker image pull $CONTAINER_TEST_IMAGE
#     - docker image tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
#     - docker image push $CONTAINER_RELEASE_IMAGE
#   only:
#     - master

cleanup:
  stage: cleanup
  script:
    - docker image rm -f $(docker image inspect -f '{{.Id}}' $CONTAINER_TEST_IMAGE) || true
  when: always
